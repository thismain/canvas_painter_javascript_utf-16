<html>
<head>
<meta charset="UTF-16">
<script src="fileSaver.js"></script>
</head>
<body style="background:#000000;overflow:hidden;">
<canvas id="canvid" width="10" height="10" style="position:absolute;left:0px;top:0px;z-index:1000;background:#000000;"></canvas>
<div id="tester" style="z-index:10000;position:absolute;top:0px;left:0px;color:black;background-color:white;font-family:monospace;font-size:20px;" ></div>
<script>
function el(a){return document.getElementById(a);}
function da(a,b){if(el(a)){el(a).innerHTML=b;el(a).style.display='block';}}
//it turns out that if the canvas width= attribute is smaller than the style width: value, objects rendered on the canvas will appear zoomed

var numParticles=80;
var zoomer=1;
var spreader=5;
var alpher=.02;
var sizer=20;
var ww=window.innerWidth/zoomer;
var hh=window.innerHeight/zoomer;
el('canvid').style.width=window.innerWidth+'px';
el('canvid').style.height=window.innerHeight+'px';
el('canvid').width=ww;
el('canvid').height=hh;


var Vec2D = (function(){
var create = function(x, y){
var obj = Object.create(def);
obj.setXY(x, y);
return obj;
};

var def={_x: 1, _y: 0,

getX: function(){return this._x;},
setX: function(value){this._x = value;},
getY: function(){return this._y;},
setY: function(value){this._y = value;},
setXY: function(x, y){this._x = x;this._y = y;},
getLength: function(){return Math.sqrt(this._x * this._x + this._y * this._y);},
setLength: function(length){
var angle = this.getAngle();
this._x = Math.cos(angle) * length;
this._y = Math.sin(angle) * length;
},
getAngle: function(){return Math.atan2(this._y, this._x);},
setAngle: function(angle){
var length = this.getLength();
this._x = Math.cos(angle) * length;
this._y = Math.sin(angle) * length;
},
add: function(vector){
this._x += vector.getX();
this._y += vector.getY();
},
sub: function(vector){
this._x -= vector.getX();
this._y -= vector.getY();
},
mul: function(value){
this._x *= value;
this._y *= value;
},
div: function(value){
this._x /= value;
this._y /= value;
}
};
return {create:create};
}());



var doublePI = Math.PI * 2;
var particlePool;
var particles=[];

var Pool = (function(){
var create = function(type, size){
var obj = Object.create(def);
obj.init(type, size);
return obj;
};

var def={
_type: null,
_size: null,
_pointer: null,
_elements:null,

init: function(type, size){
this._type = type;
this._size = size;
this._pointer = size;
this._elements = [];

var i = 0;
var length = this._size;

for(i; i < length; ++i){
this._elements[i] = this._type.create();
}
},

getElement: function(){
if(this._pointer > 0){ return this._elements[--this._pointer];}
return null;
},

disposeElement: function(obj){
this._elements[this._pointer++] = obj;
}
};

return {create:create};
}());


var Particle=(function(){
var create = function(){
var obj = Object.create(def);
obj.angle=0;
obj.sin=0;
obj.angRise=false;
obj.radius = 2;
obj.color = '#FFF';
obj.lifeSpan = 0;
obj.fric = 0.99;
obj.pos = Vec2D.create(0, 0);
obj.vel = Vec2D.create(0, 0);
obj.blacklisted = false;
return obj;
};//end create

var def={
angle: null,
sin: null,
angRise: null,
radius: null,
color: null,
lifeSpan: null,
fric: null,
pos: null,
vel: null,
blacklisted: null,

update: function(){
this.pos.add(this.vel);
if(this.sin>=Math.PI/4){this.angRise=false;}
if(this.sin<=-Math.PI/4){this.angRise=true;}
if(this.angRise){this.sin+=.1;}else{this.sin-=.1;}
this.vel.setAngle(this.angle+this.sin);
this.vel.mul(this.fric);
this.radius -= 0.1;
if(this.radius < 0.1){ this.radius = 0.1;}
if(this.lifeSpan-- < 0){this.blacklisted = true;}
},

reset: function(){this.blacklisted = false;}
}; //end def

return {create:create};
}());//end Particle function


function particleInit(){
particlePool = Pool.create(Particle, numParticles);
for(var k=0;k<numParticles;k++){particles.push(particlePool._elements[k]);}
particles = [];
}//end particleInit

var mouseBlocker=false;
var oneStep=false;

function generateThrustParticle(j){
if(!mouseBlocker){
if(typeof particlePool!=="undefined"){
var p = particlePool.getElement();
if(!p){return;}
p.radius = Math.random() * sizer + sizer/2;
p.color='#000000';
p.lifeSpan = numParticles*.8;
p.pos.setXY(
mouser.x/zoomer, 
mouser.y/zoomer+spreader*j);
p.vel.setLength(8 / p.radius);
p.sin=Math.PI/4;
p.angRise=true;
p.angle=Math.random()*Math.PI*4;
p.vel.setAngle(p.angle);
p.vel.mul(-8);
particles[particles.length] = p;
}//!==undefined
}//end if !mouseBlocker
}//end generate thrust particle

function updateParticles(){
var i = particles.length - 1;
for(i;i>-1;--i){
var p=particles[i];
if(p.blacklisted){
p.reset();
particles.splice(particles.indexOf(p), 1);
particlePool.disposeElement(p);
continue;
}
p.update();
}
}//end update particles


function utf16(a,b){return String.fromCharCode(a)+String.fromCharCode(b);}

var context=el('canvid').getContext('2d');

function renderParticles(j){
context.globalAlpha=1;
var i=particles.length-1;

for(i;i>-1;--i){
var p=particles[i];
//context.beginPath();
context.strokeStyle = p.color;
//context.arc(p.pos.getX() >> 0, p.pos.getY() >> 0, p.radius, 0, doublePI);
if(Math.random() > 0.4){ 
//context.stroke();

context.fillStyle=makeColorGradient(.16,.16,.16,  0,2,4, 128,127,cc);//'#ff5500';
//context.fill();

//context.fillStyle='#ffff00';
//search for "☆" UTF-16
/*
✲ ⋆ ❄ ❅ ❇ ❈ ❖ ✪ ✩ ✬ ✮ ✭ ✯ ✰ ✹ ✸ ✷ ✶ ✵
✳ ✱ ❊ ❉ ✾ ✽ ✼ ☆ ★ ★ ✴ ✺ ☼ ☸ ❋ ✽ ✻ ❆
۞ ۝ ☀ ❃ ❂ ✿ ❀ ❁
*/
//✻ 0x273B
//✪ 0x272A
//✵ 0x2735 
//❅ 0x2745
//✺ 0x273A 
//✯ 0x272F
//❁ 0x2741
//✴ 0x2734
//☀ 0x2600
//❇ 0x2747
//⚙ 0x2699
//✹ 0x2739
//🟔 0xD83D 0xDFD4
context.font = parseInt(p.radius*3.5)+"px Arial";
//context.font = "60px Arial";

//function utf16(a,b){return String.fromCharCode(a)+String.fromCharCode(b);}
context.fillText(utf16(0xD83D,0xDFD4),   
p.pos.getX() >> 0,   p.pos.getY() >> 0);
context.fillStyle='#000000';
context.strokeText(utf16(0xD83D,0xDFD4),   
p.pos.getX() >> 0,   p.pos.getY() >> 0);
}
//context.closePath();
}
context.globalAlpha = 1;
}//end render particles



window.onload=function(){particleInit();};
window.onmousemove=function(){mousemover(event);}

var mouser={x:0,y:0};
function mousemover(event){ 
event.preventDefault();
mouser.x=event.clientX;
mouser.y=event.clientY;
}

function byte2Hex(n){
var nybHexString = "0123456789ABCDEF";
return String(nybHexString.substr((n >> 4) & 0x0F,1)) + nybHexString.substr(n & 0x0F,1);
}

function RGB2Color(r,g,b){return '#' + byte2Hex(r) + byte2Hex(g) + byte2Hex(b);}

function makeColorGradient(
frequency1, frequency2, frequency3, 
phase1,phase2,phase3,
center,width,len){

if(center == undefined){center = 128;}
if(width == undefined){width = 127;}
if(len == undefined){len = 50;}

var red = Math.sin(frequency1*len + phase1) * width + center;
var grn = Math.sin(frequency2*len + phase2) * width + center;
var blu = Math.sin(frequency3*len + phase3) * width + center;

return RGB2Color(red,grn,blu);
}//end make color gradient


var cc=0;


function ticker(){
if(!paused&&!keyPaused){
setTimeout("requestAnimationFrame(ticker);",33);


for(j=0;j<numParticles/20;j++){
generateThrustParticle(j);
}

for(j=0;j<numParticles/20;j++){
updateParticles();
renderParticles();
}

	
//'#ffff00'; //background
context.fillStyle =makeColorGradient(.06,.06,.06,  0,2,4, 128,127,cc);
context.globalAlpha = alpher;
context.fillRect(0, 0, ww, hh);

cc++; if(cc>45){cc=0;}

if(oneStep){paused=true;}
}//end paused
}//end ticker


document.body.addEventListener("keydown", keydowner);
document.body.addEventListener("keyup", keyupper);


var keyPaused=false;
function keydowner(event){ 
switch(event.key ){
case ' ': 
//all this is because I am pausing on blur of window 
keyPaused=!keyPaused;if(!keyPaused){paused=false;ticker();}else{paused=true;}
if(oneStep){oneStep=false;paused=false;ticker();}
break;
case 'b':
mouseBlocker=!mouseBlocker;
break;
case 'ArrowRight':
oneStep=true; if(paused||keyPaused){paused=false;keyPaused=false;ticker();}
break;
case 's':
//var image=el('canvid').toDataURL("image/png").replace("image/png", "image/octet-stream");
//window.location.href=image;alert('image saved');
var d=new Date();
var filename=d.toDateString()+d.toLocaleTimeString();
el('canvid').toBlob(function(blob){saveAs(blob, filename );});
alert('file saved');
break;
}}

function keyupper(event){
switch(event.key ){
case ' ':
break;
}}


function onWindowResize(){
ww=window.innerWidth/zoomer;
hh=window.innerHeight/zoomer;
el('canvid').style.width=window.innerWidth+'px';
el('canvid').style.height=window.innerHeight+'px';
el('canvid').width=ww;
el('canvid').height=hh;
}//end on window resize

window.addEventListener('resize',onWindowResize,false);

var paused=false;
el('canvid').onmousedown=function(){paused=!paused;if(!paused){ticker();}}
window.onblur=function(){paused=true;;}
window.onfocus=function(){if(paused&&!oneStep){paused=false;ticker();}}

ticker();
</script>
</body>